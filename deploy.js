import { ethers, JsonRpcProvider } from "ethers";
import fs from "fs-extra";
import { config } from "dotenv";

config();

async function main() {
    // http://127.0.0.1:7545

    const provider = new JsonRpcProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    // let wallet = ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedJson,
    //   process.env.PRIVATE_KEY_PASSWORD
    // );

    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.abi",
        "utf8",
    );
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8",
    );

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying, please wait...");
    const contract = await contractFactory.deploy();
    const deploymentReceipt = await contract.deploymentTransaction().wait(1);

    console.log(`Contract Address: ${await contract.getAddress()}`);

    // console.log("This is the deployment of contract (transaction response)");
    // console.log(contract);
    // console.log("This is the transaction receipt");
    // console.log(deploymentReceipt);

    // console.log("Lets deploy with only transaction data!");

    // const nonce = await wallet.getNonce();
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561001057600080fd5b506107ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec1146100675780634e55367a146100855780634f2be91f146100b55780636057361d146100d35780636f760f41146100ef5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c9190610397565b60405180910390f35b61009f600480360381019061009a919061050c565b610145565b6040516100ac9190610397565b60405180910390f35b6100bd610173565b6040516100ca9190610397565b60405180910390f35b6100ed60048036038101906100e89190610581565b61017c565b005b610109600480360381019061010491906105ae565b61018f565b005b61012560048036038101906101209190610581565b61021f565b604051610133929190610692565b60405180910390f35b60008054905090565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60006002905090565b8060008190555061018b61013c565b5050565b600260405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101f59291906102db565b5050508060018360405161020991906106fe565b9081526020016040518091039020819055505050565b6002818154811061022f57600080fd5b906000526020600020906002020160009150905080600001549080600101805461025890610744565b80601f016020809104026020016040519081016040528092919081815260200182805461028490610744565b80156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b5050505050905082565b8280546102e790610744565b90600052602060002090601f0160209004810192826103095760008555610350565b82601f1061032257805160ff1916838001178555610350565b82800160010185558215610350579182015b8281111561034f578251825591602001919060010190610334565b5b50905061035d9190610361565b5090565b5b8082111561037a576000816000905550600101610362565b5090565b6000819050919050565b6103918161037e565b82525050565b60006020820190506103ac6000830184610388565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610419826103d0565b810181811067ffffffffffffffff82111715610438576104376103e1565b5b80604052505050565b600061044b6103b2565b90506104578282610410565b919050565b600067ffffffffffffffff821115610477576104766103e1565b5b610480826103d0565b9050602081019050919050565b82818337600083830152505050565b60006104af6104aa8461045c565b610441565b9050828152602081018484840111156104cb576104ca6103cb565b5b6104d684828561048d565b509392505050565b600082601f8301126104f3576104f26103c6565b5b813561050384826020860161049c565b91505092915050565b600060208284031215610522576105216103bc565b5b600082013567ffffffffffffffff8111156105405761053f6103c1565b5b61054c848285016104de565b91505092915050565b61055e8161037e565b811461056957600080fd5b50565b60008135905061057b81610555565b92915050565b600060208284031215610597576105966103bc565b5b60006105a58482850161056c565b91505092915050565b600080604083850312156105c5576105c46103bc565b5b600083013567ffffffffffffffff8111156105e3576105e26103c1565b5b6105ef858286016104de565b92505060206106008582860161056c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610644578082015181840152602081019050610629565b83811115610653576000848401525b50505050565b60006106648261060a565b61066e8185610615565b935061067e818560208601610626565b610687816103d0565b840191505092915050565b60006040820190506106a76000830185610388565b81810360208301526106b98184610659565b90509392505050565b600081905092915050565b60006106d88261060a565b6106e281856106c2565b93506106f2818560208601610626565b80840191505092915050565b600061070a82846106cd565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061075c57607f821691505b602082108114156107705761076f610715565b5b5091905056fea2646970667358221220677a221dbb1aa9db56ea3df77147ee65adba06671f8bf68d5bfb031142ab4ff564736f6c63430008080033",
    //   chainId: 1337,
    // };

    // const signedTxResponse = await wallet.signTransaction(tx);
    // console.log(signedTxResponse);
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    const currentFavoutiteNumber = await contract.retrieve();
    console.log(
        `Current favourite number: ${currentFavoutiteNumber.toString()}`,
    );

    const transactionResponse = await contract.store("7");
    const transactionReceipt = await transactionResponse.wait(1);

    const updatedFavouriteNumber = await contract.retrieve();
    // console.log(transactionReceipt);
    console.log("-----------------------------------------------------------");
    console.log(`Updated favourite number is ${updatedFavouriteNumber}`);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
